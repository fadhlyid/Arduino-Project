#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/15213002-3e0f-43de-862c-d680501c02ff 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String status;
  int sensorValue;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Inisialisasi objek lcd dengan alamat I2C 0x27 dan ukuran 16x2
#define mq135Pin A0 // Pin analog yang terhubung ke sensor MQ135
#define alarm D5

void setup() {
  pinMode(alarm, OUTPUT);
  pinMode(mq135Pin, INPUT);
  lcd.init();  // Inisialisasi LCD
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("PPM:");
  lcd.setCursor(0, 1);
  lcd.print("Udara:");
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  sensorValue = analogRead(mq135Pin);  // Membaca nilai output sensor
  
  if (sensorValue<=1000){
     lcd.setCursor(8, 0); //kolom 8 baris 1
     lcd.print(sensorValue);  // Menampilkan nilai output pada LCD
     lcd.setCursor(8, 1); //kolom 8 baris 2
     status = "Bersih";
     lcd.print(status);  // Menampilkan status kualitas udara
     Serial.print("Nilai output sensor: ");
     Serial.println(sensorValue);  // Menampilkan nilai output pada monitor serial
     Serial.print(status);
     noTone(alarm); 
  }
  
  else if (sensorValue>=1000 && sensorValue<=2000){
     lcd.setCursor(8, 0); //kolom 8 baris 1
     lcd.print(sensorValue);  // Menampilkan nilai output pada LCD
     lcd.setCursor(8, 1); //kolom 8 baris 2
     status = "Buruk";
     lcd.print(status);  // Menampilkan status kualitas udara
     Serial.print("Nilai output sensor: ");
     Serial.println(sensorValue);  // Menampilkan nilai output pada monitor serial
     Serial.print(status);
      noTone(alarm); 
  }
  
    else if (sensorValue>=2000){
     lcd.setCursor(8, 0); //kolom 8 baris 1
     lcd.print(sensorValue);  // Menampilkan nilai output pada LCD
     lcd.setCursor(8, 1); //kolom 8 baris 2
     status = "Bahaya";
     lcd.print(status);  // Menampilkan status kualitas udara
     Serial.print("Nilai output sensor: ");
     Serial.println(sensorValue);  // Menampilkan nilai output pada monitor serial
     Serial.print(status);
     tone(alarm, 2000);
  }
   delay(2000);  // Delay 2 detik
}





